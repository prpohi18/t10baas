package com.programWith.restservice.RestApp;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.PostConstruct;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


@Controller    // This means that this class is a Controller
// Defineerin asukohad, kust meetodid asuvad...saab vaadata aadressil ntx http://localhost:8080/demo/all
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String firstname, @RequestParam String lastname, @RequestParam int phonenumber
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        // Tekitab vahekasutaja, kust info läheb...edasi
        User n = new User();
        n.setFirstName(firstname);
        n.setLastName(lastname);
        n.setPhoneNumber(phonenumber);
        n.setEmail(email);
        userRepository.save(n);
        return "User Saved";
    }
    // kutsub andmebaasist kõik kasutajad välja
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }


    @GetMapping(path="/delete")
    public @ResponseBody String deleteUser(@RequestParam int id) {
        // This returns a JSON or XML with the users
        User n = new User();
        n.setId(id);
        userRepository.delete(n);
        return "User deleted";
    }

}